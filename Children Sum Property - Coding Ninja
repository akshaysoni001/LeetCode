#include <bits/stdc++.h> 
/*************************************************************

    Following is the Binary Tree node structure

    class BinaryTreeNode
    {
    public :
        T data;
        BinaryTreeNode < T > *left;
        BinaryTreeNode < T > *right;

        BinaryTreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }
    };

*************************************************************/

int convertChildSumProperty(BinaryTreeNode<int>*& root) {
    if (!root) return 0;  // Base case: If root is NULL (empty tree), return 0

    if (root->left == NULL && root->right == NULL)
        return root->data;  // Base case: If root is a leaf node, return its value

    // Check if the root has a left child
    if (root->left) {
        if (root->data > root->left->data)
            root->left->data = root->data;  // Update the value of left child if root's value is greater
    }

    // Check if the root has a right child
    if (root->right) {
        if (root->data > root->right->data)
            root->right->data = root->data;  // Update the value of right child if root's value is greater
    }

    // Recursively call convertChildSumProperty on the left and right subtrees
    int leftSum = convertChildSumProperty(root->left);
    int rightSum = convertChildSumProperty(root->right);

    // Update the value of root to be the sum of leftSum and rightSum
    root->data = leftSum + rightSum;

    return root->data;  // Return the updated value of the root
}

// Function to change the tree to satisfy the child sum property
void changeTree(BinaryTreeNode<int>* root) {
    // Call the convertChildSumProperty function to modify the tree and satisfy the child sum property
    convertChildSumProperty(root);
}
